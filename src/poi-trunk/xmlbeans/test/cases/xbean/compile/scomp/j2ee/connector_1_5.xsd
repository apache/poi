<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema"
     targetNamespace="http://java.sun.com/xml/ns/j2ee"
     xmlns:j2ee="http://java.sun.com/xml/ns/j2ee"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema"
     elementFormDefault="qualified"
     attributeFormDefault="unqualified"
     version="1.5">
<xsd:annotation>
<xsd:documentation>
@(#)connector_1_5.xsds	1.16 07/06/02
</xsd:documentation>
</xsd:annotation>

<xsd:annotation>
<xsd:documentation>

Copyright 2002 Sun Microsystems, Inc., 901 San Antonio
Road, Palo Alto, California 94303, U.S.A. All rights
reserved.

Sun Microsystems, Inc. has intellectual property rights
relating to technology described in this document. In
particular, and without limitation, these intellectual
property rights may include one or more of the U.S. patents
listed at http://www.sun.com/patents and one or more
additional patents or pending patent applications in the
U.S. and other countries.

This document and the technology which it describes are
distributed under licenses restricting their use, copying,
distribution, and decompilation. No part of this document
may be reproduced in any form by any means without prior
written authorization of Sun and its licensors, if any.

Third-party software, including font technology, is
copyrighted and licensed from Sun suppliers.

Sun, Sun Microsystems, the Sun logo, Solaris, Java, J2EE,
JavaServer Pages, Enterprise JavaBeans and the Java Coffee
Cup logo are trademarks or registered trademarks of Sun
Microsystems, Inc. in the U.S. and other countries.

Federal Acquisitions: Commercial Software - Government Users
Subject to Standard License Terms and Conditions.

</xsd:documentation>
</xsd:annotation>

<xsd:annotation>
<xsd:documentation>
<![CDATA[
This is the XML Schema for the Connector 1.5 deployment
descriptor.  All Connector deployment descriptors must
indicate the connector resource adapter schema by using the
J2EE namespace:

http://java.sun.com/xml/ns/j2ee

and by indicating the version of the schema by
using the version element as shown below:

    <connector xmlns="http://java.sun.com/xml/ns/j2ee"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
         http://java.sun.com/xml/ns/j2ee/connector_1_5.xsd"
     version="1.5">
    ...
    </connector>

The instance documents may indicate the published version of
the schema using the xsi:schemaLocation attribute for J2EE
namespace with the following location:

http://java.sun.com/xml/ns/j2ee/connector_1_5.xsd
]]>
</xsd:documentation>
</xsd:annotation>

<xsd:annotation>
<xsd:documentation>

The following conventions apply to all J2EE
deployment descriptor elements unless indicated otherwise.

- In elements that specify a pathname to a file within the
  same JAR file, relative filenames (i.e., those not
  starting with "/") are considered relative to the root of
  the JAR file's namespace.  Absolute filenames (i.e., those
  starting with "/") also specify names in the root of the
  JAR file's namespace.  In general, relative names are
  preferred.  The exception is .war files where absolute
  names are preferred for consistency with the Servlet API.

</xsd:documentation>
</xsd:annotation>

<include schemaLocation="j2ee_1_4.xsd"/>


<!-- **************************************************** -->


<xsd:element name="connector" type="j2ee:connectorType">
<xsd:annotation>
<xsd:documentation>

The connector element is the root element of the deployment
descriptor for the resource adapter. This element includes
general information - vendor name, resource adapter version,
icon - about the resource adapter module. It also includes
information specific to the implementation of the resource
adapter library as specified through the element
resourceadapter.

</xsd:documentation>
</xsd:annotation>

</xsd:element>


<!-- **************************************************** -->

<xsd:complexType name="activationspecType">
<xsd:annotation>
<xsd:documentation>

The activationspecType specifies an activation
specification.  The information includes fully qualified
Java class name of an activation specification and a set of
required configuration property names.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="activationspec-class"
                     type="j2ee:fully-qualified-classType">
        <xsd:annotation>
        <xsd:documentation>

        The element activationspec-class specifies the fully
        qualified Java class name of the activation
        specification class. This class must implement the
        javax.resource.spi.ActivationSpec interface. The
        implementation of this class is required to be a
        JavaBean.

        Example:
            <activationspec-class>com.wombat.ActivationSpecImpl
            </activationspec-class>

        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>
        <xsd:element name="required-config-property"
                     type="j2ee:required-config-propertyType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:complexType name="adminobjectType">
<xsd:annotation>
<xsd:documentation>

The adminobjectType specifies information about an
administered object.  Administered objects are specific to a
messaging style or message provider.  This contains
information on the Java type of the interface implemented by
an administered object, its Java class name and its
configuration properties.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="adminobject-interface"
                     type="j2ee:fully-qualified-classType">
        <xsd:annotation>
        <xsd:documentation>

        The element adminobject-interface specifies the
        fully qualified name of the Java type of the
        interface implemented by an administered object.

         Example:
         <adminobject-interface>javax.jms.Destination
         </adminobject-interface>

        </xsd:documentation>
        </xsd:annotation>

        </xsd:element>
        <xsd:element name="adminobject-class"
                     type="j2ee:fully-qualified-classType">
        <xsd:annotation>
        <xsd:documentation>

        The element adminobject-class specifies the fully
        qualified Java class name of an administered object.

        Example:
            <adminobject-class>com.wombat.DestinationImpl
            </adminobject-class>

        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>

        <xsd:element name="config-property"
                     type="j2ee:config-propertyType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:complexType name="authentication-mechanismType">
<xsd:annotation>
<xsd:documentation>

The authentication-mechanismType specifies an authentication
mechanism supported by the resource adapter. Note that this
support is for the resource adapter and not for the
underlying EIS instance. The optional description specifies
any resource adapter specific requirement for the support of
security contract and authentication mechanism.

Note that BasicPassword mechanism type should support the
javax.resource.spi.security.PasswordCredential interface.
The Kerbv5 mechanism type should support the
org.ietf.jgss.GSSCredential interface or the deprecated
javax.resource.spi.security.GenericCredential interface.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="description"
                     type="j2ee:descriptionType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
        <xsd:element name="authentication-mechanism-type"
                     type="xsd:string">
        <xsd:annotation>
        <xsd:documentation>

        The element authentication-mechanism-type specifies
        type of an authentication mechanism.

        The example values are:

        <authentication-mechanism-type>BasicPassword
        </authentication-mechanism-type>

        <authentication-mechanism-type>Kerbv5
        </authentication-mechanism-type>

        Any additional security mechanisms are outside the
        scope of the Connector architecture specification.

        </xsd:documentation>
        </xsd:annotation>

        </xsd:element>
        <xsd:element name="credential-interface"
                     type="j2ee:credential-interfaceType"/>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:simpleType name="config-property-nameType">
<xsd:annotation>
<xsd:documentation>

The config-property-nameType contains the name of a
configuration property.

The connector architecture defines a set of well-defined
properties all of type java.lang.String. These are as
follows.

     ServerName
     PortNumber
     UserName
     Password
     ConnectionURL

A resource adapter provider can extend this property set to
include properties specific to the resource adapter and its
underlying EIS.

Possible values include
        ServerName
        PortNumber
        UserName
        Password
        ConnectionURL

Example: <config-property-name>ServerName</config-property-name>

</xsd:documentation>
</xsd:annotation>
    <xsd:restriction base="xsd:string">
    </xsd:restriction>
</xsd:simpleType>

<!-- **************************************************** -->

<xsd:simpleType name="config-property-typeType">
<xsd:annotation>
<xsd:documentation>

The config-property-typeType contains the fully
qualified Java type of a configuration property.

The following are the legal values:
   java.lang.Boolean, java.lang.String, java.lang.Integer,
   java.lang.Double, java.lang.Byte, java.lang.Short,
   java.lang.Long, java.lang.Float, java.lang.Character

Used in: config-property

Example:
<config-property-type>java.lang.String</config-property-type>

</xsd:documentation>
</xsd:annotation>
    <xsd:restriction base="j2ee:string">
        <xsd:enumeration value="java.lang.Boolean"/>
        <xsd:enumeration value="java.lang.String"/>
        <xsd:enumeration value="java.lang.Integer"/>
        <xsd:enumeration value="java.lang.Double"/>
        <xsd:enumeration value="java.lang.Byte"/>
        <xsd:enumeration value="java.lang.Short"/>
        <xsd:enumeration value="java.lang.Long"/>
        <xsd:enumeration value="java.lang.Float"/>
        <xsd:enumeration value="java.lang.Character"/>
    </xsd:restriction>
</xsd:simpleType>

<!-- **************************************************** -->

<xsd:complexType name="config-propertyType">
<xsd:annotation>
<xsd:documentation>

The config-propertyType contains a declaration of a single
configuration property that may be used for providing
configuration information.

The declaration consists of an optional description, name,
type and an optional value of the configuration property. If
the resource adapter provider does not specify a value than
the deployer is responsible for providing a valid value for
a configuration property.

Any bounds or well-defined values of properties should be
described in the description element.

</xsd:documentation>
</xsd:annotation>
    <xsd:sequence>
        <xsd:element name="description"
                     type="j2ee:descriptionType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
        <xsd:element name="config-property-name"
                     type="j2ee:config-property-nameType"/>
        <xsd:element name="config-property-type"
                     type="j2ee:config-property-typeType"/>
        <xsd:element name="config-property-value"
                     type="xsd:string"
                     minOccurs="0">
        <xsd:annotation>
        <xsd:documentation>

        The element config-property-value contains the value
        of a configuration entry. Note, it is possible for a
        resource adapter deployer to override this
        configuration information during deployment.

        Example:
        <config-property-value>WombatServer</config-property-value>

        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:complexType name="connection-definitionType">
<xsd:annotation>
<xsd:documentation>

The connection-definitionType defines a set of connection
interfaces and classes pertaining to a particular connection
type. This also includes configurable properties for
ManagedConnectionFactory instances that may be produced out
of this set.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="managedconnectionfactory-class"
                     type="j2ee:fully-qualified-classType">
        <xsd:annotation>
        <xsd:documentation>

        The element managedconnectionfactory-class specifies
        the fully qualified name of the Java class that
        implements the
        javax.resource.spi.ManagedConnectionFactory interface.
        This Java class is provided as part of resource
        adapter's implementation of connector architecture
        specified contracts. The implementation of this
        class is required to be a JavaBean.

        Example:
        <managedconnectionfactory-class>
            com.wombat.ManagedConnectionFactoryImpl
        </managedconnectionfactory-class>

        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>
        <xsd:element name="config-property"
                     type="j2ee:config-propertyType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
        <xsd:element name="connectionfactory-interface"
                     type="j2ee:fully-qualified-classType">
        <xsd:annotation>
        <xsd:documentation>

        The element connectionfactory-interface specifies
        the fully qualified name of the ConnectionFactory
        interface supported by the resource adapter.

        Example:
        <connectionfactory-interface>com.wombat.ConnectionFactory
        </connectionfactory-interface>

        OR

        <connectionfactory-interface>javax.resource.cci.ConnectionFactory
        </connectionfactory-interface>

        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>

        <xsd:element name="connectionfactory-impl-class"
                     type="j2ee:fully-qualified-classType">
        <xsd:annotation>
        <xsd:documentation>

        The element connectionfactory-impl-class specifies
        the fully qualified name of the ConnectionFactory
        class that implements resource adapter
        specific ConnectionFactory interface.

        Example:

        <connectionfactory-impl-class>com.wombat.ConnectionFactoryImpl
        </connectionfactory-impl-class>

        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>
        <xsd:element name="connection-interface"
                     type="j2ee:fully-qualified-classType">
        <xsd:annotation>
        <xsd:documentation>

        The connection-interface element specifies the fully
        qualified name of the Connection interface supported
        by the resource adapter.

        Example:

            <connection-interface>javax.resource.cci.Connection
            </connection-interface>

        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>
        <xsd:element name="connection-impl-class"
                     type="j2ee:fully-qualified-classType">
        <xsd:annotation>
        <xsd:documentation>

        The connection-impl-classType specifies the fully
        qualified name of the Connection class that
        implements resource adapter specific Connection
        interface.  It is used by the connection-impl-class
        elements.

        Example:

            <connection-impl-class>com.wombat.ConnectionImpl
            </connection-impl-class>

        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:complexType name="connectorType">
<xsd:annotation>
<xsd:documentation>

The connectorType defines a resource adapter.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="description"
                     type="j2ee:descriptionType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
        <xsd:element name="display-name"
                     type="j2ee:display-nameType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
        <xsd:element name="icon"
                     type="j2ee:iconType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
        <xsd:element name="vendor-name">
        <xsd:annotation>
        <xsd:documentation>

        The element vendor-name specifies the name of
        resource adapter provider vendor.

        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>
        <xsd:element name="eis-type"
                     type="xsd:string">
        <xsd:annotation>
        <xsd:documentation>

        The element eis-type contains information about the
        type of the EIS. For example, the type of an EIS can
        be product name of EIS independent of any version
        info.

        This helps in identifying EIS instances that can be
        used with this resource adapter.

        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>
        <xsd:element name="resourceadapter-version"
                     type="xsd:string">
        <xsd:annotation>
        <xsd:documentation>

        The element version specifies a string-based version
        of the resource adapter from the resource adapter
        provider.

        </xsd:documentation>
        </xsd:annotation>

        </xsd:element>
        <xsd:element name="license"
                     type="j2ee:licenseType"
                     minOccurs="0"/>
        <xsd:element name="resourceadapter"
                     type="j2ee:resourceadapterType"/>
        <xsd:element name="deployment-extension"
                     type="j2ee:deployment-extensionType"
                     minOccurs="0"
                     maxOccurs="unbounded">
        <xsd:annotation>
        <xsd:documentation>

        Resource adapter specific extensions can be
        specified by using the deployment-extension
        elements.

        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>

    </xsd:sequence>
    <xsd:attribute name="version"
                   type="j2ee:dewey-versionType"
                   fixed="1.5"
                   use="required">
    <xsd:annotation>
    <xsd:documentation>

    The version specifies the version of the
    connector architecture specification that is
    supported by this resource adapter. This information
    enables deployer to configure the resource adapter to
    support deployment and runtime requirements of the
    corresponding connector architecture specification.

    </xsd:documentation>
    </xsd:annotation>
    </xsd:attribute>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:simpleType name="credential-interfaceType">
<xsd:annotation>
<xsd:documentation>

The credential-interfaceType specifies the
interface that the resource adapter implementation
supports for the representation of the
credentials. This element(s) that use this type,
i.e. credential-interface,  should be used by
application server to find out the Credential
interface it should use as part of the security
contract.

The possible values are:

javax.resource.spi.security.PasswordCredential
org.ietf.jgss.GSSCredential
javax.resource.spi.security.GenericCredential

</xsd:documentation>
</xsd:annotation>

  <xsd:restriction base="j2ee:fully-qualified-classType">
        <xsd:enumeration
            value="javax.resource.spi.security.PasswordCredential"/>
        <xsd:enumeration
            value="org.ietf.jgss.GSSCredential"/>
        <xsd:enumeration
            value="javax.resource.spi.security.GenericCredential"/>
    </xsd:restriction>

</xsd:simpleType>

<!-- **************************************************** -->

<xsd:complexType name="inbound-resourceadapterType">
<xsd:annotation>
<xsd:documentation>

The inbound-resourceadapterType specifies information
about an inbound resource adapter. This contains information
specific to the implementation of the resource adapter
library as specified through the messageadapter element.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="messageadapter"
                     type="j2ee:messageadapterType"
                     minOccurs="0">
        <xsd:unique name="messagelistener-type-uniqueness">
        <xsd:annotation>
        <xsd:documentation>

        The messagelistener-type element content must be
        unique in the messageadapter. Several messagelisteners
        can not use the same messagelistener-type.

        </xsd:documentation>
        </xsd:annotation>
        <xsd:selector xpath="j2ee:messagelistener"/>
        <xsd:field    xpath="j2ee:messagelistener-type"/>
        </xsd:unique>
        </xsd:element>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:complexType name="licenseType">
<xsd:annotation>
<xsd:documentation>

The licenseType specifies licensing requirements for the
resource adapter module. This type specifies whether a
license is required to deploy and use this resource adapter,
and an optional description of the licensing terms
(examples: duration of license, number of connection
restrictions). It is used by the license element.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
            <xsd:element name="description"
                         type="j2ee:descriptionType"
                         minOccurs="0"
                         maxOccurs="unbounded"/>
            <xsd:element name="license-required"
                         type="j2ee:true-falseType">
            <xsd:annotation>
            <xsd:documentation>

            The element license-required specifies whether a
            license is required to deploy and use the
            resource adapter. This element must be one of
            the following, "true" or "false".

            </xsd:documentation>
            </xsd:annotation>
            </xsd:element>
    </xsd:sequence>
</xsd:complexType>

<!-- **************************************************** -->

<xsd:complexType name="messageadapterType">
<xsd:annotation>
<xsd:documentation>

The messageadapterType specifies information about the
messaging capabilities of the resource adapter. This
contains information specific to the implementation of the
resource adapter library as specified through the
messagelistener element.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="messagelistener"
                     type="j2ee:messagelistenerType"
                     maxOccurs="unbounded"/>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:complexType name="messagelistenerType">
<xsd:annotation>
<xsd:documentation>

The messagelistenerType specifies information about a
specific message listener supported by the messaging
resource adapter. It contains information on the Java type
of the message listener interface and an activation
specification.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="messagelistener-type"
                     type="j2ee:fully-qualified-classType">
        <xsd:annotation>
        <xsd:documentation>

        The element messagelistener-type specifies the fully
        qualified name of the Java type of a message
        listener interface.

        Example:

          <messagelistener-type>javax.jms.MessageListener
          </messagelistener-type>

        </xsd:documentation>
        </xsd:annotation>

        </xsd:element>
        <xsd:element name="activationspec"
                     type="j2ee:activationspecType"/>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:complexType name="outbound-resourceadapterType">
<xsd:annotation>
<xsd:documentation>

The outbound-resourceadapterType specifies information about
an outbound resource adapter. The information includes fully
qualified names of classes/interfaces required as part of
the connector architecture specified contracts for
connection management, level of transaction support
provided, one or more authentication mechanisms supported
and additional required security permissions.

If there is no authentication-mechanism specified as part of
resource adapter element then the resource adapter does not
support any standard security authentication mechanisms as
part of security contract. The application server ignores
the security part of the system contracts in this case.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="connection-definition"
                     type="j2ee:connection-definitionType"
                     maxOccurs="unbounded"/>
        <xsd:element name="transaction-support"
                     type="j2ee:transaction-supportType"/>
        <xsd:element name="authentication-mechanism"
                     type="j2ee:authentication-mechanismType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
        <xsd:element name="reauthentication-support"
                     type="j2ee:true-falseType">
        <xsd:annotation>
        <xsd:documentation>

        The element reauthentication-support specifies
        whether the resource adapter implementation supports
        re-authentication of existing Managed- Connection
        instance. Note that this information is for the
        resource adapter implementation and not for the
        underlying EIS instance. This element must have
        either a "true" or "false" value.

        </xsd:documentation>
        </xsd:annotation>

        </xsd:element>
        <xsd:element name="security-permission"
                     type="j2ee:security-permissionType"
                     minOccurs="0"
                     maxOccurs="unbounded">
        </xsd:element>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:complexType name="required-config-propertyType">
<xsd:annotation>
<xsd:documentation>

The required-config-propertyType contains a declaration
of a single configuration property used for specifying a
required configuration property name. It is used
by required-config-property elements.

Example:

<required-config-property>Destination</required-config-property>

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="description"
                     type="j2ee:descriptionType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
        <xsd:element name="config-property-name"
                     type="j2ee:config-property-nameType"/>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:complexType name="resourceadapterType">
<xsd:annotation>
<xsd:documentation>

The resourceadapterType specifies information about the
resource adapter. The information includes fully qualified
resource adapter Java class name, configuration properties,
information specific to the implementation of the resource
adapter library as specified through the
outbound-resourceadapter and inbound-resourceadapter
elements, and an optional set of administered objects.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="resourceadapter-class"
                     type="j2ee:fully-qualified-classType"
                     minOccurs="0">
        <xsd:annotation>
        <xsd:documentation>

        The element resourceadapter-class specifies the
        fully qualified name of a Java class that implements
        the javax.resource.spi.ResourceAdapter
        interface. This Java class is provided as part of
        resource adapter's implementation of connector
        architecture specified contracts. The implementation
        of this class is required to be a JavaBean.

        </xsd:documentation>
        </xsd:annotation>

        </xsd:element>
        <xsd:element name="config-property"
                     type="j2ee:config-propertyType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
        <xsd:element name="outbound-resourceadapter"
                     type="j2ee:outbound-resourceadapterType"
                     minOccurs="0"/>
        <xsd:element name="inbound-resourceadapter"
                     type="j2ee:inbound-resourceadapterType"
                     minOccurs="0"/>
        <xsd:element name="adminobject"
                     type="j2ee:adminobjectType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:complexType name="security-permissionType">
<xsd:annotation>
<xsd:documentation>

The security-permissionType specifies a security
permission that is required by the resource adapter code.

The security permission listed in the deployment descriptor
are ones that are different from those required by the
default permission set as specified in the connector
specification. The optional description can mention specific
reason that resource adapter requires a given security
permission.

</xsd:documentation>
</xsd:annotation>

    <xsd:sequence>
        <xsd:element name="description"
                     type="j2ee:descriptionType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
        <xsd:element name="security-permission-spec"
                     type="xsd:string">
        <xsd:annotation>
        <xsd:documentation>

        The element permission-spec specifies a security
        permission based on the Security policy file
        syntax. Refer to the following URL for Sun's
        implementation of the security permission
        specification:

        http://java.sun.com/products/jdk/1.4/docs/guide/security/PolicyFiles.html#FileSyntax
        </xsd:documentation>
        </xsd:annotation>
        </xsd:element>
    </xsd:sequence>

</xsd:complexType>

<!-- **************************************************** -->

<xsd:simpleType name="transaction-supportType">
<xsd:annotation>
<xsd:documentation>

The transaction-supportType specifies the level of
transaction support provided by the resource adapter. It is
used by transaction-support elements.

The value must be one of the following:

    NoTransaction
    LocalTransaction
    XATransaction

</xsd:documentation>
</xsd:annotation>

    <xsd:restriction base="j2ee:string">
        <xsd:enumeration value="NoTransaction"/>
        <xsd:enumeration value="LocalTransaction"/>
        <xsd:enumeration value="XATransaction"/>
    </xsd:restriction>

</xsd:simpleType>

</xsd:schema>

